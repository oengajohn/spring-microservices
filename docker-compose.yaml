services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Admin@123
      PGDATA: /data/postgres
    volumes:
      - ./postgres-order: /data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: unless-stopped

  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Admin@123
      PGDATA: /data/postgres
    volumes:
      - ./postgres-inventory: /data/postgres
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433
    restart: unless-stopped

  postgres-product:
    container_name: postgres-product
    image: postgres
    environment:
      POSTGRES_DB: product-service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Admin@123
      PGDATA: /data/postgres
    volumes:
      - ./postgres-product: /data/postgres
    expose:
      - "5434"
    ports:
      - "5434:5434"
    command: -p 5434
    restart: unless-stopped

  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: keycloak
      MYSQL_DATABASE: keycloak

    volumes:
      - ./mysql_keycloak: /var/lib/mysql
    expose:
      - "3308"
    ports:
      - "3308:3308"
    command: -p 3308
    restart: unless-stopped

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:20.0.3
    command: ["start-dev","--import-realm"]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8085:8080"
    volumes:
      - ./realms/:opt/keycloak/data/import
    depends_on:
      - keycloak-mysql
  zipkin:
    container_name: keycloak
    image: openzipkin/zipkin

    ports:
      - "9411:9411"
  discoveryserver:
    image: oengajohn/discoveryserver:latest
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
  api-gateway:
    image: oengajohn/api-gateway:latest
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    depends_on:
      - zipkin
      - discoveryserver
      - keycloak
  product-service:
    image: oengajohn/product-service:latest
    container_name: product-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-product:5434/product-service
    depends_on:
      - discoveryserver
      - api-gateway
      - postgres-product
  order-service:
    image: oengajohn/order-service:latest
    container_name: order-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
    depends_on:
      - discoveryserver
      - api-gateway
      - postgres-order
      - broker
      - zipkin
  inventory-service:
    image: oengajohn/inventory-service:latest
    container_name: inventory-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5433/inventory-service
    depends_on:
      - discoveryserver
      - api-gateway
      - postgres-inventory
  notification-service:
    image: oengajohn/notification-service:latest
    container_name: inventory-service
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - discoveryserver
      - api-gateway
      - zipkin
      - broker